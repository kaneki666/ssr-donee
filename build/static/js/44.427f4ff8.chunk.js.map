{"version":3,"sources":["screen/Home/NGO/Dashboard/Pages/Roles.js"],"names":["TABLE_HEAD","id","label","alignRight","PageTitle","styled","Typography","fontSize","fontWeight","height","color","descendingComparator","a","b","orderBy","Roles","axiosInstance","useAxios","useState","userList","setUserList","roleList","setRoleList","refetch","setRefetch","useQuery","get","response","data","isLoading","isError","error","rolesQuery","useEffect","undefined","newArry","map","itemUser","user","full_name","name","avatarUrl","image","role","status","is_active","itemRole","value","role_type","RolesComponent","handleRefetch","SORT_BY_STATUS","page","setPage","order","setOrder","selected","setSelected","setOrderBy","filterName","setFilterName","rowsPerPage","setRowsPerPage","selectedIndex","setSelectedIndex","open","setOpen","emptyRows","Math","max","length","filteredUsers","array","comparator","query","stabilizedThis","el","index","sort","filter","_user","toLowerCase","indexOf","applySortFilter","getComparator","isUserNotFound","mutationRoleUpdate","useMutation","dataReq","put","roleID","mutationStatusUpdate","handleClose","direction","alignItems","justifyContent","mb","sx","backgroundColor","borderRadius","variant","onClick","startIcon","icon","plusFill","marginTop","numSelected","onFilterName","event","target","minWidth","headLabel","rowCount","onRequestSort","property","onSelectAllClick","checked","newSelecteds","n","slice","row","isItemSelected","handleRoleChange","mutateAsync","setTimeout","handleStatusChange","hover","tabIndex","component","scope","padding","spacing","alt","src","noWrap","align","options","style","colSpan","py","searchQuery","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"mappings":"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","file":"static/js/44.427f4ff8.chunk.js","sourcesContent":["import { filter } from \"lodash\";\r\nimport { Icon } from \"@iconify/react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport plusFill from \"@iconify/icons-eva/plus-fill\";\r\n\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\n// material\r\nimport {\r\n  Card,\r\n  Table,\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  Container,\r\n  Typography,\r\n  TableContainer,\r\n  TablePagination,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\n\r\n// components\r\n\r\nimport Scrollbar from \"../../../../../components/Scrollbar\";\r\nimport SearchNotFound from \"../../../../../components/SearchNotFound\";\r\nimport {\r\n  AddNewMember,\r\n  DropDownMenu,\r\n  UserListHead,\r\n  UserListToolbar,\r\n} from \"./components\";\r\n\r\nimport { useMutation, useQuery } from \"react-query\";\r\n\r\nimport useAxios from \"../../../../../utils/useAxios\";\r\nimport Loader from \"../../../../../components/Loader\";\r\nimport ApiErrorPage from \"../../../../Errror/ApiErrorPage\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"name\", label: \"Name\", alignRight: false },\r\n  { id: \"role\", label: \"Role\", alignRight: false },\r\n  { id: \"status\", label: \"Status\", alignRight: false },\r\n];\r\n\r\n// <Typography\r\n\r\nconst PageTitle = styled(Typography)(() => ({\r\n  fontSize: 32,\r\n  fontWeight: \"bold\",\r\n  height: 40,\r\n  color: \"#212529\",\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction applySortFilter(array, comparator, query) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  if (query) {\r\n    return filter(array, (_user) => {\r\n      if (_user.user.full_name !== null) {\r\n        return (\r\n          _user.user.full_name.toLowerCase().indexOf(query.toLowerCase()) !== -1\r\n        );\r\n      }\r\n    });\r\n  }\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nexport default function Roles() {\r\n  const axiosInstance = useAxios();\r\n\r\n  const [userList, setUserList] = useState([]);\r\n  const [roleList, setRoleList] = useState([]);\r\n  const [refetch, setRefetch] = useState(false);\r\n\r\n  const { data, isLoading, isError, error } = useQuery(\r\n    [\"roleUserListDashboard\", refetch],\r\n    async () => {\r\n      const response = await axiosInstance.get(`/ngo-user-list/`);\r\n\r\n      return response.data;\r\n    }\r\n  );\r\n\r\n  const rolesQuery = useQuery([\"roleListDashboard\"], async () => {\r\n    const response = await axiosInstance.get(`/role-list/`);\r\n\r\n    return response.data;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data !== undefined && data !== null) {\r\n      const newArry = data.map((itemUser) => {\r\n        if (itemUser.user.full_name !== null) {\r\n          const newUser = {\r\n            id: itemUser.id,\r\n            name: itemUser.user.full_name,\r\n            avatarUrl: itemUser.user.image,\r\n            role: itemUser.role,\r\n            status: itemUser.is_active,\r\n          };\r\n          return newUser;\r\n        } else {\r\n          const newUser = {\r\n            id: itemUser.id,\r\n            name: \"\",\r\n            avatarUrl: itemUser.user.image,\r\n            role: itemUser.role,\r\n            status: itemUser.is_active,\r\n          };\r\n          return newUser;\r\n        }\r\n      });\r\n      setUserList(newArry);\r\n    }\r\n  }, [data, refetch]);\r\n\r\n  useEffect(() => {\r\n    if (rolesQuery.data !== undefined && rolesQuery.data !== null) {\r\n      const newArry = rolesQuery.data.map((itemRole) => {\r\n        if (itemRole.id !== null) {\r\n          const newRole = {\r\n            value: itemRole.id,\r\n            label: itemRole.role_type,\r\n          };\r\n          return newRole;\r\n        }\r\n      });\r\n\r\n      setRoleList(newArry);\r\n    }\r\n  }, [rolesQuery.data]);\r\n  const handleRefetch = () => setRefetch(!refetch);\r\n  return (\r\n    <div>\r\n      {isLoading || rolesQuery.isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {isError || rolesQuery.isError ? (\r\n            <ApiErrorPage error={isError ? error : rolesQuery.error} />\r\n          ) : (\r\n            userList && (\r\n              <RolesComponent\r\n                data={data}\r\n                roleList={roleList}\r\n                handleRefetch={handleRefetch}\r\n              />\r\n            )\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst RolesComponent = ({ data, roleList, handleRefetch }) => {\r\n  const axiosInstance = useAxios();\r\n\r\n  const SORT_BY_STATUS = [\r\n    { value: true, label: \"Active\" },\r\n    { value: false, label: \"Inactive\" },\r\n  ];\r\n  const [page, setPage] = useState(0);\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [selected, setSelected] = useState([]);\r\n  const [orderBy, setOrderBy] = useState(\"name\");\r\n  const [filterName, setFilterName] = useState(\"\");\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = data.map((n) => n.user.full_name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleFilterByName = (event) => {\r\n    setFilterName(event.target.value);\r\n  };\r\n\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - data.length) : 0;\r\n\r\n  const filteredUsers = applySortFilter(\r\n    data,\r\n    getComparator(order, orderBy),\r\n    filterName\r\n  );\r\n\r\n  const isUserNotFound = filteredUsers.length === 0;\r\n\r\n  const mutationRoleUpdate = useMutation(async (dataReq) => {\r\n    const response = await axiosInstance.put(\r\n      `ngo-user-role-update/${dataReq.id}/`,\r\n      {\r\n        role: dataReq.roleID,\r\n      }\r\n    );\r\n    return response;\r\n  });\r\n\r\n  const mutationStatusUpdate = useMutation(async (dataReq) => {\r\n    const response = await axiosInstance.put(\r\n      `ngo-user-status-update/${dataReq.id}/`,\r\n      {\r\n        is_active: dataReq.is_active,\r\n      }\r\n    );\r\n    return response;\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <AddNewMember open={open} handleClose={handleClose} />\r\n      <Stack\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        mb={0}\r\n      >\r\n        <PageTitle>Roles</PageTitle>\r\n        <Button\r\n          sx={{ backgroundColor: \"#4F89A0\", borderRadius: 40 }}\r\n          variant=\"contained\"\r\n          onClick={handleOpen}\r\n          startIcon={<Icon icon={plusFill} />}\r\n        >\r\n          Add new member\r\n        </Button>\r\n      </Stack>\r\n\r\n      {/* <Typography variant=\"body1\" mb={5}>\r\n                Be in control of the activities that each of your team can do\r\n              </Typography>\r\n\r\n              <Grid\r\n                container\r\n                justifyContent=\"space-around\"\r\n                spacing={3}\r\n                sx={{ pb: 5 }}\r\n              >\r\n                {demoData.map((item) => (\r\n                  <Grid item xs={6} sm={4} md={2}>\r\n                    <CustomButton variant=\"contained\">{item}</CustomButton>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                spacing={3}\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <Grid item xs={12} sm={6} md={4}></Grid>\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                  <SearchDashboard label=\"Search Members\" />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                  <SortedBy />\r\n                </Grid>\r\n              </Grid> */}\r\n\r\n      <Card sx={{ marginTop: 3 }}>\r\n        <UserListToolbar\r\n          numSelected={selected.length}\r\n          filterName={filterName}\r\n          onFilterName={handleFilterByName}\r\n        />\r\n\r\n        <Scrollbar>\r\n          <TableContainer sx={{ minWidth: 800 }}>\r\n            <Table>\r\n              <UserListHead\r\n                order={order}\r\n                orderBy={orderBy}\r\n                headLabel={TABLE_HEAD}\r\n                rowCount={data.length}\r\n                numSelected={selected.length}\r\n                onRequestSort={handleRequestSort}\r\n                onSelectAllClick={handleSelectAllClick}\r\n              />\r\n              <TableBody>\r\n                {filteredUsers\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row) => {\r\n                    const { id, user, role, is_active } = row;\r\n                    const isItemSelected =\r\n                      selected.indexOf(user.full_name) !== -1;\r\n\r\n                    const handleRoleChange = async (index) => {\r\n                      setSelectedIndex(index);\r\n\r\n                      const data = {\r\n                        id: id,\r\n                        roleID: roleList[index].value,\r\n                      };\r\n                      mutationRoleUpdate.mutateAsync(data);\r\n                      setTimeout(() => {\r\n                        handleRefetch();\r\n                      }, 200);\r\n                    };\r\n                    const handleStatusChange = async (index) => {\r\n                      setSelectedIndex(index);\r\n                      const data = {\r\n                        id: id,\r\n                        is_active: SORT_BY_STATUS[index].value,\r\n                      };\r\n                      mutationStatusUpdate.mutateAsync(data);\r\n                      setTimeout(() => {\r\n                        handleRefetch();\r\n                      }, 200);\r\n                    };\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        key={id}\r\n                        tabIndex={-1}\r\n                        role=\"checkbox\"\r\n                        selected={isItemSelected}\r\n                        aria-checked={isItemSelected}\r\n                      >\r\n                        {/*   <TableCell padding=\"checkbox\">\r\n                       <Checkbox\r\n                            checked={isItemSelected}\r\n                            onChange={(event) => handleClick(event, name)}\r\n                          /> \r\n                        </TableCell>*/}\r\n                        <TableCell component=\"th\" scope=\"row\" padding=\"normal\">\r\n                          <Stack\r\n                            direction=\"row\"\r\n                            alignItems=\"center\"\r\n                            spacing={2}\r\n                          >\r\n                            <Avatar alt={user.full_name} src={user.image} />\r\n                            <Typography variant=\"subtitle2\" noWrap>\r\n                              {user.full_name}\r\n                            </Typography>\r\n                          </Stack>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                          <Stack\r\n                            direction=\"row\"\r\n                            alignItems=\"center\"\r\n                            spacing={2}\r\n                            justifyContent=\"space-between\"\r\n                          >\r\n                            {role}\r\n                            <DropDownMenu\r\n                              options={roleList}\r\n                              handleStatusChange={handleRoleChange}\r\n                              selectedIndex={selectedIndex}\r\n                            />\r\n                          </Stack>\r\n                        </TableCell>\r\n                        {/* <TableCell align=\"left\">{fToNow(lastactive)}</TableCell> */}\r\n\r\n                        <TableCell align=\"left\">\r\n                          <Stack\r\n                            direction=\"row\"\r\n                            alignItems=\"center\"\r\n                            spacing={2}\r\n                            justifyContent=\"space-between\"\r\n                          >\r\n                            <Typography\r\n                              sx={{ color: is_active ? \"#16B698\" : \"tomato\" }}\r\n                            >\r\n                              {is_active ? \"Active Donee\" : \"Inactive Donee\"}\r\n                            </Typography>\r\n                            <DropDownMenu\r\n                              options={SORT_BY_STATUS}\r\n                              handleStatusChange={handleStatusChange}\r\n                              selectedIndex={selectedIndex}\r\n                            />\r\n                          </Stack>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                {emptyRows > 0 && (\r\n                  <TableRow style={{ height: 53 * emptyRows }}>\r\n                    <TableCell colSpan={6} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n              {isUserNotFound && (\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\r\n                      <SearchNotFound searchQuery={filterName} />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              )}\r\n            </Table>\r\n          </TableContainer>\r\n        </Scrollbar>\r\n\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={data.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n"],"sourceRoot":""}